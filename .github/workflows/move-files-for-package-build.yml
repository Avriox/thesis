name: R Package Auto-Build

on:
  push:
    branches:
      - package_v2

jobs:
  build-r-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches
    
    - name: Debug Repository Structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "--------------------"
        find . -type d -maxdepth 3 | sort
    
    - name: Setup Git Identity
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
    
    - name: Create or Reset r-package-build Branch
      run: |
        # Check if r-package-build branch exists
        if git ls-remote --heads origin r-package-build | grep r-package-build; then
          echo "Branch exists, resetting"
          git checkout package_v2
          git branch -D r-package-build || true
          git checkout -b r-package-build
        else
          echo "Branch doesn't exist, creating"
          git checkout -b r-package-build
        fi
    
    - name: Restructure Files for R Package
      run: |
        echo "Preparing R package structure"
        
        # Ensure src directory exists
        mkdir -p src
        
        # Find and identify the mombf directory
        echo "Looking for mombf directory..."
        MOMBF_DIR=$(find . -type d -name "mombf" | grep -v "node_modules" | head -1 || echo "")
        if [ -n "$MOMBF_DIR" ]; then
          echo "Found mombf directory at: $MOMBF_DIR"
          
          # Try to find the correct src directory within mombf
          MOMBF_SRC=$(find "$MOMBF_DIR" -type d -name "src" | head -1 || echo "")
          if [ -n "$MOMBF_SRC" ]; then
            echo "Found mombf src directory at: $MOMBF_SRC"
            echo "Copying mombf source files to src/"
            cp -v "$MOMBF_SRC"/*.cpp src/ 2>/dev/null || echo "No mombf cpp files found"
            cp -v "$MOMBF_SRC"/*.h src/ 2>/dev/null || echo "No mombf header files found"
          else
            echo "Could not find mombf src directory"
          fi
        else
          echo "Could not find mombf directory"
        fi
        
        # Find and identify the lasso directory
        echo "Looking for lasso directory..."
        LASSO_DIR=$(find . -type d -name "lasso" | grep -v "node_modules" | head -1 || echo "")
        if [ -n "$LASSO_DIR" ]; then
          echo "Found lasso directory at: $LASSO_DIR"
          echo "Copying lasso files to src/"
          cp -v "$LASSO_DIR"/*.cpp src/ 2>/dev/null || echo "No lasso cpp files found"
          cp -v "$LASSO_DIR"/*.h src/ 2>/dev/null || echo "No lasso header files found"
        else
          echo "Could not find lasso directory"
        fi
        
        # List all files in src/ to verify
        echo "Files in src/ directory:"
        ls -la src/
        
        # List all files in root to verify
        echo "Files in root directory:"
        ls -la
    
    - name: Check for Modified Files
      id: check_modified
      run: |
        git status --porcelain
        if [[ -n $(git status --porcelain) ]]; then
          echo "modified=true" >> $GITHUB_OUTPUT
        else
          echo "modified=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and Push Changes
      if: steps.check_modified.outputs.modified == 'true'
      run: |
        git add .
        git commit -m "Auto-update R package structure [skip ci]"
        git push -f origin r-package-build
        echo "Successfully pushed to r-package-build branch"